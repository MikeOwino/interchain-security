// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: interchain_security/ccv/v1/ccv.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	types1 "github.com/cosmos/ibc-go/modules/core/02-client/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/tendermint/tendermint/abci/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Status defines if the ccv channel is in one of the following states:
// UNINITIALIZED, INITIALIZING, VALIDATING, INVALID
type Status int32

const (
	// Default State
	UNINITIALIZED Status = 0
	// channel is in handshake process
	INITIALIZING Status = 1
	// channel is open and validating
	VALIDATING Status = 2
	// channel is invalid and can no longer process packets
	INVALID Status = 3
)

var Status_name = map[int32]string{
	0: "STATUS_UNINITIALIZED_UNSPECIFIED",
	1: "STATUS_INITIALIZING",
	2: "STATUS_VALIDATING",
	3: "STATUS_INVALID",
}

var Status_value = map[string]int32{
	"STATUS_UNINITIALIZED_UNSPECIFIED": 0,
	"STATUS_INITIALIZING":              1,
	"STATUS_VALIDATING":                2,
	"STATUS_INVALID":                   3,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_68bd5f3242e6f29c, []int{0}
}

// This packet is sent from parent chain to baby chain if the validator set for baby chain
// changes (due to new bonding/unbonding messages or slashing events)
// The acknowledgement from baby chain will be sent asynchronously once unbonding period is over,
// and this will function as `UnbondingOver` message for this packet.
type ValidatorSetChangePacketData struct {
	ValidatorUpdates []types.ValidatorUpdate `protobuf:"bytes,1,rep,name=validator_updates,json=validatorUpdates,proto3" json:"validator_updates" yaml:"validator_updates"`
}

func (m *ValidatorSetChangePacketData) Reset()         { *m = ValidatorSetChangePacketData{} }
func (m *ValidatorSetChangePacketData) String() string { return proto.CompactTextString(m) }
func (*ValidatorSetChangePacketData) ProtoMessage()    {}
func (*ValidatorSetChangePacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_68bd5f3242e6f29c, []int{0}
}
func (m *ValidatorSetChangePacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorSetChangePacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorSetChangePacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorSetChangePacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorSetChangePacketData.Merge(m, src)
}
func (m *ValidatorSetChangePacketData) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorSetChangePacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorSetChangePacketData.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorSetChangePacketData proto.InternalMessageInfo

func (m *ValidatorSetChangePacketData) GetValidatorUpdates() []types.ValidatorUpdate {
	if m != nil {
		return m.ValidatorUpdates
	}
	return nil
}

// CreateChildChainProposal is a governance proposal on the parent chain to spawn a new child chain.
// If it passes, then all validators on the parent chain are expected to validate the child chain at spawn time
// or get slashed. It is recommended that spawn time occurs after the proposal end time.
type CreateChildChainProposal struct {
	// the title of the proposal
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// the description of the proposal
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// the proposed chain-id of the new child chain, must be different from all other child chain ids of the executing
	// parent chain.
	ChainId string `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" yaml:"chain_id"`
	// the proposed initial height of new child chain.
	// For a completely new chain, this will be {0,1}. However, it may be different if this is a chain that is converting to a child chain.
	InitialHeight types1.Height `protobuf:"bytes,4,opt,name=initial_height,json=initialHeight,proto3" json:"initial_height" yaml:"initial_height"`
	// genesis hash with no staking information included.
	GenesisHash []byte `protobuf:"bytes,5,opt,name=genesis_hash,json=genesisHash,proto3" json:"genesis_hash,omitempty" yaml:"genesis_hash"`
	// binary hash is the hash of the binary that should be used by validators on chain initialization.
	BinaryHash []byte `protobuf:"bytes,6,opt,name=binary_hash,json=binaryHash,proto3" json:"binary_hash,omitempty" yaml:"binary_hash"`
	// spawn time is the time on the parent chain at which the child chain genesis is finalized and all validators
	// will be responsible for starting their child chain validator node.
	SpawnTime time.Time `protobuf:"bytes,7,opt,name=spawn_time,json=spawnTime,proto3,stdtime" json:"spawn_time" yaml:"spawn_time"`
}

func (m *CreateChildChainProposal) Reset()      { *m = CreateChildChainProposal{} }
func (*CreateChildChainProposal) ProtoMessage() {}
func (*CreateChildChainProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_68bd5f3242e6f29c, []int{1}
}
func (m *CreateChildChainProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateChildChainProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateChildChainProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateChildChainProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateChildChainProposal.Merge(m, src)
}
func (m *CreateChildChainProposal) XXX_Size() int {
	return m.Size()
}
func (m *CreateChildChainProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateChildChainProposal.DiscardUnknown(m)
}

var xxx_messageInfo_CreateChildChainProposal proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("interchain_security.ccv.v1.Status", Status_name, Status_value)
	proto.RegisterType((*ValidatorSetChangePacketData)(nil), "interchain_security.ccv.v1.ValidatorSetChangePacketData")
	proto.RegisterType((*CreateChildChainProposal)(nil), "interchain_security.ccv.v1.CreateChildChainProposal")
}

func init() {
	proto.RegisterFile("interchain_security/ccv/v1/ccv.proto", fileDescriptor_68bd5f3242e6f29c)
}

var fileDescriptor_68bd5f3242e6f29c = []byte{
	// 679 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x54, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0xb6, 0x9b, 0x5e, 0x27, 0x6d, 0xff, 0xc4, 0xed, 0x0f, 0xc6, 0x40, 0x6c, 0x59, 0x20, 0x05,
	0x24, 0x6c, 0xa5, 0x2c, 0x2a, 0x75, 0x97, 0x4b, 0xa1, 0x16, 0x55, 0x54, 0xe5, 0x52, 0xa1, 0x6e,
	0xc2, 0xc4, 0x19, 0xec, 0x11, 0x8e, 0xc7, 0xf2, 0x4c, 0x02, 0x79, 0x83, 0x2a, 0x1b, 0xba, 0x64,
	0x13, 0xa9, 0x12, 0x6f, 0x81, 0xc4, 0xbe, 0xcb, 0x2e, 0x59, 0x05, 0xd4, 0xbe, 0x41, 0x9e, 0x00,
	0x79, 0xec, 0x5c, 0x0a, 0xac, 0x3c, 0xe7, 0xbb, 0x1c, 0x9d, 0x73, 0x7c, 0x66, 0xc0, 0x13, 0xec,
	0x33, 0x14, 0xda, 0x2e, 0xc4, 0x7e, 0x8b, 0x22, 0xbb, 0x17, 0x62, 0x36, 0x30, 0x6d, 0xbb, 0x6f,
	0xf6, 0x0b, 0xd1, 0xc7, 0x08, 0x42, 0xc2, 0x88, 0xa4, 0xfc, 0x43, 0x65, 0x44, 0x74, 0xbf, 0xa0,
	0xec, 0x3a, 0xc4, 0x21, 0x5c, 0x66, 0x46, 0xa7, 0xd8, 0xa1, 0x3c, 0x64, 0xc8, 0xef, 0xa0, 0xb0,
	0x8b, 0x7d, 0x66, 0xc2, 0xb6, 0x8d, 0x4d, 0x36, 0x08, 0x10, 0x4d, 0xc8, 0x07, 0x0e, 0x21, 0x8e,
	0x87, 0x4c, 0x1e, 0xb5, 0x7b, 0xef, 0x4d, 0xe8, 0x0f, 0x12, 0x4a, 0xfd, 0x93, 0x62, 0xb8, 0x8b,
	0x28, 0x83, 0xdd, 0x60, 0x2a, 0xc0, 0x6d, 0xdb, 0xb4, 0x49, 0x88, 0x4c, 0xdb, 0xc3, 0xc8, 0x67,
	0xbc, 0x50, 0x7e, 0x8a, 0x05, 0xfa, 0x67, 0x11, 0x3c, 0x3a, 0x85, 0x1e, 0xee, 0x40, 0x46, 0xc2,
	0x3a, 0x62, 0x65, 0x17, 0xfa, 0x0e, 0x3a, 0x81, 0xf6, 0x07, 0xc4, 0x2a, 0x90, 0x41, 0x89, 0x80,
	0x6c, 0x7f, 0xca, 0xb7, 0x7a, 0x41, 0x07, 0x32, 0x44, 0x65, 0x51, 0x4b, 0xe5, 0xd3, 0x7b, 0x9a,
	0x31, 0x2f, 0xdb, 0x88, 0xca, 0x36, 0x66, 0x99, 0x9a, 0x5c, 0x58, 0xd2, 0xae, 0xc6, 0xaa, 0x30,
	0x19, 0xab, 0xf2, 0x00, 0x76, 0xbd, 0x03, 0xfd, 0xaf, 0x44, 0x7a, 0x2d, 0xd3, 0xbf, 0x6b, 0xa1,
	0xfa, 0xf7, 0x14, 0x90, 0xcb, 0x21, 0x82, 0x0c, 0x95, 0x5d, 0xec, 0x75, 0xca, 0xd1, 0x18, 0x4f,
	0x42, 0x12, 0x10, 0x0a, 0x3d, 0x69, 0x17, 0xac, 0x30, 0xcc, 0x3c, 0x24, 0x8b, 0x9a, 0x98, 0xdf,
	0xa8, 0xc5, 0x81, 0xa4, 0x81, 0x74, 0x07, 0x51, 0x3b, 0xc4, 0x01, 0xc3, 0xc4, 0x97, 0x97, 0x38,
	0xb7, 0x08, 0x49, 0x06, 0x58, 0x8f, 0xff, 0x07, 0xee, 0xc8, 0xa9, 0x88, 0x2e, 0xed, 0x4c, 0xc6,
	0xea, 0x7f, 0x71, 0x59, 0x53, 0x46, 0xaf, 0xad, 0xf1, 0xa3, 0xd5, 0x91, 0xde, 0x81, 0x6d, 0xec,
	0x63, 0x86, 0xa1, 0xd7, 0x72, 0x11, 0x76, 0x5c, 0x26, 0x2f, 0x6b, 0x62, 0x3e, 0xbd, 0xa7, 0x18,
	0xb8, 0x6d, 0x1b, 0xd1, 0x40, 0x8d, 0x64, 0x8c, 0xfd, 0x82, 0x71, 0xc4, 0x15, 0xa5, 0xc7, 0x49,
	0xb3, 0xff, 0xc7, 0x59, 0xef, 0xfa, 0xf5, 0xda, 0x56, 0x02, 0xc4, 0x6a, 0xe9, 0x00, 0x6c, 0x3a,
	0xc8, 0x47, 0x14, 0xd3, 0x96, 0x0b, 0xa9, 0x2b, 0xaf, 0x68, 0x62, 0x7e, 0xb3, 0x74, 0x7f, 0x32,
	0x56, 0x77, 0x62, 0xff, 0x22, 0xab, 0xd7, 0xd2, 0x49, 0x78, 0x04, 0xa9, 0x2b, 0xed, 0x83, 0x74,
	0x1b, 0xfb, 0x30, 0x1c, 0xc4, 0xd6, 0x55, 0x6e, 0xbd, 0x37, 0x19, 0xab, 0x52, 0x6c, 0x5d, 0x20,
	0xf5, 0x1a, 0x88, 0x23, 0x6e, 0x7c, 0x0b, 0x00, 0x0d, 0xe0, 0x47, 0xbf, 0x15, 0xed, 0x89, 0xbc,
	0x96, 0xb4, 0x14, 0x2f, 0x91, 0x31, 0x5d, 0x22, 0xa3, 0x31, 0x5d, 0xa2, 0x59, 0x4b, 0xd9, 0x38,
	0xef, 0xdc, 0xab, 0x5f, 0xfc, 0x54, 0xc5, 0xda, 0x06, 0x07, 0x22, 0xf9, 0xc1, 0xfa, 0xf9, 0xa5,
	0x2a, 0x7c, 0xb9, 0x54, 0x85, 0xe7, 0xdf, 0x44, 0xb0, 0x5a, 0x67, 0x90, 0xf5, 0xa8, 0xb4, 0x0f,
	0xb4, 0x7a, 0xa3, 0xd8, 0x68, 0xd6, 0x5b, 0xcd, 0xaa, 0x55, 0xb5, 0x1a, 0x56, 0xf1, 0xd8, 0x3a,
	0x3b, 0xac, 0xb4, 0x9a, 0xd5, 0xfa, 0xc9, 0x61, 0xd9, 0x7a, 0x65, 0x1d, 0x56, 0x32, 0x82, 0x92,
	0x1d, 0x8e, 0xb4, 0xad, 0x3b, 0x02, 0xe9, 0x19, 0xd8, 0x49, 0x8c, 0x33, 0xd4, 0xaa, 0xbe, 0xce,
	0x88, 0x4a, 0x66, 0x38, 0xd2, 0x36, 0x17, 0x31, 0xe9, 0x29, 0xc8, 0x26, 0xd2, 0xd3, 0xe2, 0xb1,
	0x55, 0x29, 0x36, 0x22, 0xe1, 0x92, 0xb2, 0x3d, 0x1c, 0x69, 0x60, 0x8e, 0x48, 0x2a, 0xd8, 0x9e,
	0x65, 0xe4, 0x70, 0x26, 0xa5, 0xa4, 0x87, 0x23, 0x6d, 0x2d, 0x09, 0x95, 0xe5, 0xf3, 0xaf, 0x39,
	0xa1, 0xf4, 0xe6, 0xea, 0x26, 0x27, 0x5e, 0xdf, 0xe4, 0xc4, 0x5f, 0x37, 0x39, 0xf1, 0xe2, 0x36,
	0x27, 0x5c, 0xdf, 0xe6, 0x84, 0x1f, 0xb7, 0x39, 0xe1, 0xac, 0xe0, 0x60, 0xe6, 0xf6, 0xda, 0x86,
	0x4d, 0xba, 0xa6, 0x4d, 0x68, 0x97, 0x50, 0x73, 0x7e, 0xcd, 0x5f, 0xcc, 0x1e, 0x83, 0x4f, 0xfc,
	0x39, 0xe0, 0xd7, 0xb7, 0xbd, 0xca, 0x27, 0xfa, 0xf2, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9e,
	0x23, 0xb2, 0x7b, 0x36, 0x04, 0x00, 0x00,
}

func (m *ValidatorSetChangePacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorSetChangePacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorSetChangePacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorUpdates) > 0 {
		for iNdEx := len(m.ValidatorUpdates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorUpdates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCcv(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateChildChainProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChildChainProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateChildChainProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.SpawnTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.SpawnTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintCcv(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x3a
	if len(m.BinaryHash) > 0 {
		i -= len(m.BinaryHash)
		copy(dAtA[i:], m.BinaryHash)
		i = encodeVarintCcv(dAtA, i, uint64(len(m.BinaryHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.GenesisHash) > 0 {
		i -= len(m.GenesisHash)
		copy(dAtA[i:], m.GenesisHash)
		i = encodeVarintCcv(dAtA, i, uint64(len(m.GenesisHash)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.InitialHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCcv(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintCcv(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCcv(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCcv(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCcv(dAtA []byte, offset int, v uint64) int {
	offset -= sovCcv(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValidatorSetChangePacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValidatorUpdates) > 0 {
		for _, e := range m.ValidatorUpdates {
			l = e.Size()
			n += 1 + l + sovCcv(uint64(l))
		}
	}
	return n
}

func (m *CreateChildChainProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCcv(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCcv(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovCcv(uint64(l))
	}
	l = m.InitialHeight.Size()
	n += 1 + l + sovCcv(uint64(l))
	l = len(m.GenesisHash)
	if l > 0 {
		n += 1 + l + sovCcv(uint64(l))
	}
	l = len(m.BinaryHash)
	if l > 0 {
		n += 1 + l + sovCcv(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.SpawnTime)
	n += 1 + l + sovCcv(uint64(l))
	return n
}

func sovCcv(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCcv(x uint64) (n int) {
	return sovCcv(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValidatorSetChangePacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCcv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorSetChangePacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorSetChangePacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorUpdates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCcv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCcv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorUpdates = append(m.ValidatorUpdates, types.ValidatorUpdate{})
			if err := m.ValidatorUpdates[len(m.ValidatorUpdates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCcv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCcv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateChildChainProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCcv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChildChainProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChildChainProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCcv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCcv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCcv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCcv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCcv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCcv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCcv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCcv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCcv
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCcv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisHash = append(m.GenesisHash[:0], dAtA[iNdEx:postIndex]...)
			if m.GenesisHash == nil {
				m.GenesisHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCcv
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCcv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryHash = append(m.BinaryHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BinaryHash == nil {
				m.BinaryHash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpawnTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCcv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCcv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.SpawnTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCcv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCcv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCcv(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCcv
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCcv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCcv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCcv
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCcv
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCcv
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCcv        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCcv          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCcv = fmt.Errorf("proto: unexpected end of group")
)
